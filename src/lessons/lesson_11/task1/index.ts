const isDigit = (str: string): boolean => {
  if (!str) {
    return false;
  }

  if (isArabicDigit(str[0])) {
    return isArabicDigit(str);
  }

  if (isRomainDigit(str[0])) {
    return isRomainDigit(str);
  }

  return false;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç {@param str} –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä–∞–±—Å–∫–æ–º—É —á–∏—Å–ª—É.
 * –ï—Å–ª–∏ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª —è–≤–ª—è–µ—Ç—Å—è —Ü–∏—Ñ—Ä–æ–π —Ç.–µ. –ª–µ–∂–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 30 –¥–æ 39. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º.
 * @param str
 */
const isArabicDigit = (str: string): boolean => {
  for (let i = 0; i < str.length; i++) {
    const codePoint = str.codePointAt(i) as number;
    if (codePoint < 0x0030 || codePoint > 0x0039) {
      return false;
    }
  }
  return true;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç {@param str} –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∏–º—Å–∫–æ–º—É —á–∏—Å–ª—É.
 * –ù–µ —É—á–∏—Ç—ã–≤–∞–µ–º –º–∞–ª—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–∏–º–≤–æ–ª—ã. –ù–µ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∏—Å–ª–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∑–∞–ø–∏—Å–∏ —Ä–∏–º—Å–∫–∏—Ö —á–∏—Å–µ–ª.
 * @param str
 */
const isRomainDigit = (str: string): boolean => {
  for (let i = 0; i < str.length; i++) {
    const codePoint = str.codePointAt(i) as number;
    if (!isSpecialRomainCodePoint(codePoint) && !isSimpleRomainCodePoint(codePoint)) {
      return false;
    }
  }
  return true;
};

const isSpecialRomainCodePoint = (codePoint: number) => {
  return codePoint >= 0x2160 && codePoint <= 0x216f;
};

const isSimpleRomainCodePoint = (codePoint: number) => {
  return simpleRomainCodePoints.includes(codePoint);
};
const simpleRomainCodePoints = ['V', 'I', 'X', 'L', 'C', 'D', 'M'].map(
  (ch) => ch.codePointAt(0) as number,
);

const iter = (str: string) => {
  return {
    *[Symbol.iterator]() {
      for (let i = 0; i < str.length; i++) {
        const targetCharCode = (str[i] as string).charCodeAt(0) as number;

        if (isNaN(targetCharCode)) {
          yield '';
          continue;
        }

        if (!isSurrogate(targetCharCode)) {
          const [grapheme, num] = addDiacriticalElements(str, i);
          i = num;
          yield grapheme;
          continue;
        }

        if (isHighSurrogate(targetCharCode)) {
          if (str.length <= i + 1) {
            throw Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—à–µ–≥–æ —Å—É—Ä—Ä–æ–≥–∞—Ç–∞');
          } else if (isLowSurrogate((str[i + 1] as string).charCodeAt(0) as number)) {
            yield str[i] + str[i + 1];
            i++;
          } else {
            throw Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–ª–∞–¥—à–∏–π —Å—É—Ä—Ä–æ–≥–∞—Ç –¥–ª—è —Å—Ç–∞—Ä—à–µ–≥–æ —Å—É—Ä—Ä–æ–≥–∞—Ç–∞');
          }
        }

        if (isLowSurrogate(targetCharCode)) {
          if (str.length <= i + 1) {
            throw Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—à–µ–≥–æ —Å—É—Ä—Ä–æ–≥–∞—Ç–∞');
          } else if (isHighSurrogate((str[i + 1] as string).charCodeAt(0) as number)) {
            yield str[i] + str[i + 1];
            i++;
          } else {
            throw Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–ª–∞–¥—à–∏–π —Å—É—Ä—Ä–æ–≥–∞—Ç –¥–ª—è —Å—Ç–∞—Ä—à–µ–≥–æ —Å—É—Ä—Ä–æ–≥–∞—Ç–∞');
          }
        }
      }
    },
  };
};

const addDiacriticalElements = (str: string, i: number): [string, number] => {
  const targetCharCode = str[i].charCodeAt(0);

  if (isNaN(targetCharCode)) {
    throw Error('–°–∏–º–≤–æ–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }

  let resultStr = str[i],
    j = i + 1;
  for (; j < str.length; j++) {
    if (!isDiacriticalSymbol(str.charCodeAt(j))) {
      break;
    }
    resultStr += str.charAt(j);
  }

  return [resultStr, j - 1];
};

const isSurrogate = (utf16code: number) => utf16code >= 0xd800 && utf16code <= 0xdfff;
const isHighSurrogate = (utf16code: number) => utf16code >= 0xd800 && utf16code <= 0xdbff;
const isLowSurrogate = (utf16code: number) => utf16code >= 0xdc00 && utf16code <= 0xdfff;
const isDiacriticalSymbol = (utf16code: number) => utf16code >= 0x0300 && utf16code <= 0x036f;

console.log([...iter('üòÄ\u2661\u0300')]);
console.log([...iter('1üòÉaÃÄüá∑üá∫')]); // ['1', 'üòÉ', 'aÃÄ'']);
// console.log([...iter('1üòÉaÃÄüá∑üá∫üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®')]) // ['1', 'üòÉ', 'aÃÄ', 'üá∑üá∫', 'üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®']);

console.log(isDigit('123')); // true
console.log(isDigit('\u216F\u2165')); // true
console.log(isDigit('MMMDCCCXLIV')); // true
console.log(isDigit('12345F')); // false
console.log(isDigit('\u216F\u2165\u1111')); // false
console.log(isDigit('MMMDCCCXLIVU')); // false
